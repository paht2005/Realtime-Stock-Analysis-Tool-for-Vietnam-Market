import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from vnstock import Vnstock
from vnstock import *
from stock_analyzer import * 
from datetime import datetime, timedelta

# H√†m format ti·ªÅn t·ªá
def format_currency(value):
    return f"{value:,.0f} ‚Ç´"

# ============ Streamlit UI ============


st.set_page_config(page_title="Ph√¢n T√≠ch C·ªï Phi·∫øu", layout="wide")
st.title("üìà H·ªá Th·ªëng Ph√¢n T√≠ch C·ªï Phi·∫øu")
st.markdown("""
Nh·∫≠p m√£ c·ªï phi·∫øu (v√≠ d·ª•: **VIC**, **VNM**, **ACB**...) ƒë·ªÉ xem ph√¢n t√≠ch d·ªØ li·ªáu giao d·ªãch trong ng√†y.
""")

symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu (g√µ END ƒë·ªÉ k·∫øt th√∫c):").strip().upper()

if symbol == 'END':
    st.success("K·∫øt th√∫c phi√™n l√†m vi·ªác. T·∫°m bi·ªát!")
    st.stop()
if symbol:
    try:
        st.info(f"ƒêang t·∫£i d·ªØ li·ªáu cho m√£ **{symbol}**...")

        df = get_intraday_data(symbol)
        if df.empty:
            st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu cho m√£ {symbol}.")
        else:
            df = preprocess_data(df)
            resampled = aggregate_data(df)
            summary = calculate_summary(df, resampled)

            # Tabs for charts and summary
            tab1, tab2 = st.tabs(["üìä Bi·ªÉu ƒë·ªì", "üìã Th·ªëng k√™"])

            with tab1:
                st.subheader("Bi·ªÉu ƒë·ªì ph√¢n t√≠ch")

                st.pyplot(plot_cum_net_flow(resampled, symbol))
                st.pyplot(plot_avg_buy_sell_ratio(resampled, symbol))
                st.pyplot(plot_cum_in_out_flow(resampled, symbol))
                st.pyplot(plot_net_flow_heatmap(df, symbol))
                st.pyplot(plot_volume_and_orders_distribution(df, resampled, symbol))

            with tab2:
                st.subheader("T√≥m t·∫Øt th·ªëng k√™")
                for key, value in summary.items():
                    if isinstance(value, str):
                        st.markdown(f"**{key}**: {value}")
                    elif isinstance(value, float):
                        st.markdown(f"**{key}**: {value:.6f}")
                    else:
                        st.markdown(f"**{key}**: {value}")

    except Exception as e:
        st.error(f"L·ªói ph√¢n t√≠ch m√£ {symbol}: {e}")
